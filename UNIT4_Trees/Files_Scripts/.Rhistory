parol = read.csv("parole.csv")
str(parol)
setwd(/Users/Miller/Desktop/R_EDX/UNIT3)
setwd("/Users/Miller/Desktop/R_EDX/UNIT3")
#Load it baby
parol = read.csv("parole.csv")
setwd("~/Desktop/R_EDX/UNIT3/Files_Scripts")
setwd("~/Desktop/R_EDX/UNIT3/Files_Scripts")
parol = read.csv("parole.csv")
str(parol)
table(parol$violator)
table(parol)
str(parol)
summary(parol)
parol$state = as.factor(parol$state)
parol$crime = as.factor(parol$crime)
str(parol)
str(parol)
summary(parol)
set.seed(144)
library(caTools)
split = sample.split(parole$violator, SplitRatio = 0.7)
train = subset(parole, split == TRUE)
parole = read.csv("parole.csv")
str(parole)
summary(parole)
table(parole$violator)
parole$state = as.factor(parole$state)
parole$crime = as.factor(parole$crime)
set.seed(144)
library(caTools)
split = sample.split(parole$violator, SplitRatio = 0.7)
train = subset(parole, split == TRUE)
test = subset(parole, split == FALSE)
mod1 = glm(violator ~ ., data = train, family="binomial")
summary(mod1)
exp(1.61)
val = (1*0.3869904)+(1*0.8867192)+(50*-0.0001756)+(3*-0.1238867)+(12*0.0802954)+(2*0.6837143)
val
exp(val)
prob = 1/(1+(exp(-val)))
prob
val = (1*0.3869904)+(1*0.8867192)+(50*-0.0001756)+(3*-0.1238867)+(12*0.0802954)+(2*0.6837143)+1
val
exp(val) # Odds - 25.13454
prob = 1/(1+(exp(-val)))
prob # Probability - 0.9617365
val = -4.2411574+(1*0.3869904)+(1*0.8867192)+(50*-0.0001756)+(3*-0.1238867)+(12*0.0802954)+(2*0.6837143)
val
exp(val) # Odds - 25.13454 OR 68.32276
prob = 1/(1+(exp(-val)))
prob # Probability - 0.9617365 OR 0.9855747
val = -4.2411574+1+(1*0.3869904)+(1*0.8867192)+(50*-0.0001756)+(3*-0.1238867)+(12*0.0802954)+(2*0.6837143)
val
exp(val) # Odds - 25.13454 OR 68.32276 or 0.3617093
prob = 1/(1+(exp(-val)))
prob # Probability - 0.9617365 OR 0.9855747 or 0.2656289
val = -4.2411574+(1*0.3869904)+(1*0.8867192)+(50*-0.0001756)+(3*-0.1238867)+(12*0.0802954)+(1*0.6837143)
val
exp(val) # Odds - 25.13454 OR 68.32276 or 0.3617093
prob = 1/(1+(exp(-val)))
prob # Probability - 0.9617365 OR 0.9855747 or 0.2656289
pred1 = predict(mod1, newdata = test, type="response")
summary(pred1)
table(test$violator, pred1 >= 0.5)
nrow(test)
table(test$violator, as.numeric(predictions >= 0.5))
table(test$violator, as.numeric(pred1 >= 0.5))
table(test$violator, as.numeric(pred1 >= 0.5))
table(test$violator, pred1 >= 0.5)
table(test$violator)
23/212
12/212
179/212
(179-12)/212
table(test$violator, as.numeric(pred1 >= 0.75))
table(test$violator, as.numeric(pred1 >= 0.5))
table(test$violator)
library(ROCR)
ROCRpred = prediction(pred1,test$violator)
as.numeric(performance(ROCRpred,"auc")@y.values)
loans = read.csv("loans.csv")
str(loans)
summary(loans)
table(loans$log.annual.inc)
str(loans)
summary(loans)
table(loans$not.fully.paid)
1533/(1533+8045)
miss = subset(loans, is.na(pub.rec))
miss
nrow(miss)
3/29
miss = subset(loans, is.na(log.annual.inc) | is.na(days.with.cr.line) | is.na(revol.util) | is.na(inq.last.6mths) | is.na(delinq.2yrs) | is.na(pub.rec))
miss
nrow(miss)
table(miss$not.fully.paid)
12/62
library(mice)
set.seed(144)
loans = read.csv("loans_imputed.csv")
loans = read.csv("loans_imputed.csv")
set.seed(144)
split = sample.split(loans$not.fully.paid, SplitRatio = 0.7)
train = subset(loans, split == TRUE)
test = subset(loans, split == FALSE)
mod1 = glm(not.fully.paid ~.,data=train, family="binomial")
summary(mod1)
a = 700*-0.009317 # Loan A
b = 710*-0.009317 # Loan B
ans = a-b
ans
logitA = 9.187 + (700*-0.009317) # Loan A
logitB = 9.187 + (710*-0.009317) # Loan B
ans = a-b
ans # Value of 0.09317
exp(logitA)/exp(logitB)
predicted.risk = predict(mod1, newdata=test, type="response")
test$predicted.risk = predicted.risk
table(test$not.fully.paid, predicted.risk >= 0.5)
(2400+3) / (2400+13+457+3)
table(test$not.fully.paid)
460/(2413+460)
2413/(2413+460)
ROCRpred = prediction(predicted.risk,test$not.fully.paid)
as.numeric(performance(ROCRpred,"auc")@y.values)
bivariate = glm(not.fully.paid~int.rate, data=train, family="binomial")
summary(bivariate)
pred2 = predict(bivariate, newdata = test, type="response")
summary(pred2)
table(test$not.fully.paid,pred2 >= 0.5)
ROCRpred = prediction(pred2,test$not.fully.paid)
as.numeric(performance(ROCRpred,"auc")@y.values)
c_inv = 10
rt = .06
years = 3
int_revenue = c_inv * exp(rt * years)
int_revenue
test$profit = exp(test$int.rate*3) - 1
test$profit[test$not.fully.paid == 1] = -1
which.max(test$profit)
test$profit[1780]
summary(test$profit)
which.max(test$profit)
test$profit[1780]
highInterest = subset(test, int.rate > .15)
summary(highInterest)
highInterest = subset(test, int.rate >= .15)
summary(highInterest)
selectedLoans = subset(test,predicted.risk<=cutoff)
cutoff = sort(highInterest$predicted.risk, decreasing=FALSE)[100]
selectedLoans = subset(test,predicted.risk<=cutoff)
cutoff = sort(highInterest$predicted.risk, decreasing=FALSE)[100]
selectedLoans = subset(test,predicted.risk>=cutoff)
cutoff = sort(highInterest$predicted.risk, decreasing=FALSE)[100]
selectedLoans = subset(test,test$predicted.risk>=cutoff)
selectedLoans = subset(test,test$predicted.risk<=cutoff)
cutoff = sort(highInterest$predicted.risk, decreasing=FALSE)[100]
selectedLoans = subset(highInterest,highInterest$predicted.risk<=cutoff)
summary(selectedLoans)
sum(selectedLoans$profit)
length(selectedLoans$not.fully.paid == TRUE)
selectedLoans$not.fully.paid == TRUE
nrow(selectedLoans$not.fully.paid == TRUE)
table(selectedLoans$not.fully.paid)
setwd("~/Desktop/R_EDX/UNIT4/Files_Scripts")
stevens = read.csv("stevens.csv")
str(stevens)
table(stevens$Term,stevens$Docket)
table(stevens$Docket,stevens$Term)
str(stevens)
library(caTools)
set.seed(3000)
spl = sample.split(stevens$Reverse,SplitRatio = 0.7)
spl = sample.split(stevens$Reverse,SplitRatio = 0.7)
train = subset(stevens,spl == TRUE)
test = subset(stevens,spl == FALSE)
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
library(rpart)
install.packages("rpart.plot")
library(rpart.plot)
StevensTree = rpart(Reverse ~ Circuit + Issue + Petitioner + Respondent + LowerCourt + Unconst, data=Train, method="class", minbucket = 25)
prp(StevensTree)
StevensTree = rpart(Reverse ~ Circuit + Issue + Petitioner + Respondent + LowerCourt + Unconst, data=train, method="class", minbucket = 25)
prp(StevensTree)
library(caTools)
set.seed(3000)
spl = sample.split(stevens$Reverse,SplitRatio = 0.7)
train = subset(stevens,spl == TRUE)
test = subset(stevens,spl == FALSE)
install.packages("rpart")
library(rpart)
library(rpart.plot)
StevensTree = rpart(Reverse ~ Circuit + Issue + Petitioner + Respondent + LowerCourt + Unconst, data=train, method="class", minbucket = 25)
prp(StevensTree)
PredictCART = predict(StevensTree,newdata=test, type="class")
table(Test$Reverse,PredictCART)
PredictCART = predict(StevensTree,newdata=test, type="class")
table(Test$Reverse,PredictCART)
table(test$Reverse,PredictCART)
(41+71)/(41+36+22+71)
(41+71)/(41+36+22+71) #0.6588235
table(test$Reverse)
93/(93+77)
library(ROCR)
PredictROC = predict(StevensTree,newdata=test)
PredictROC
pred = prediction(PredictROC[,2], Test$Reverse)
i
pred = prediction(PredictROC[,2], test$Reverse)
perf = performance(pred,"tpr","fpr")
plot(perf)
as.numeric(performance(pred, "auc")@y.values)
StevensTree2 = rpart(Reverse ~ Circuit + Issue + Petitioner + Respondent + LowerCourt + Unconst, data=train, method="class", minbucket = 5)
prp(StevensTree)
prp(StevensTree)
prp(StevensTree)
prp(StevensTree2)
StevensTree3 = rpart(Reverse ~ Circuit + Issue + Petitioner + Respondent + LowerCourt + Unconst, data=train, method="class", minbucket = 100)
prp(StevensTree3)
install.packages("randomForest")
library(randomForest)
StevensForest = randomForest(Reverse ~ Circuit + Issue + Petitioner + Respondent + LowerCourt + Unconst, data = Train, nodesize = 25, ntree = 200)
StevensForest = randomForest(Reverse ~ Circuit + Issue + Petitioner + Respondent + LowerCourt + Unconst, data = train, nodesize = 25, ntree = 200)
train$Reverse = as.factor(train$Reverse)
test$Reverse = as.factor(test$Reverse)
StevensForest = randomForest(Reverse ~ Circuit + Issue + Petitioner + Respondent + LowerCourt + Unconst, data = train, nodesize = 25, ntree = 200)
PredictForest = predict(StevensForest, newdata=test)
table(test$Reverse,PredictForest)
(40+74)/(40+37+19+74)
set.seed(100)
StevensForest2 = randomForest(Reverse ~ Circuit + Issue + Petitioner + Respondent + LowerCourt + Unconst, data = train, nodesize = 25, ntree = 200)
PredictForest2 = predict(StevensForest2, newdata=test)
table(test$Reverse,PredictForest2)
(43+74)/(40+37+19+74) # 0.6705882
set.seed(200)
StevensForest3 = randomForest(Reverse ~ Circuit + Issue + Petitioner + Respondent + LowerCourt + Unconst, data = train, nodesize = 25, ntree = 200)
# Model ready for predictions
PredictForest3 = predict(StevensForest3, newdata=test)
# Confusion Matrix - give true outcome and our predictions
table(test$Reverse,PredictForest3)
(44+76)/(40+37+19+74) # 0.6882353
install.packages("caret")
library(caret)
install.packages("e1071")
library(e1071)
numFolds = trainControl(method="cv", number = 10) #10 folds
train(Reverse ~ Circuit + Issue + Petitioner + Respondent + LowerCourt + Unconst, data = train,method = "rpart",trControl = numFolds,tuneGrid=cpGrid)  #dep var with ind vars
numFolds = trainControl(method="cv", number = 10) #10 folds
# Pick possible values for CV Value
cpGrid = expand.grid(.cp=seq(0.01,0.5,0.01)) #defines CP parems to test .01 to .5 in increments of .01
# Perform Cross Validation
train(Reverse ~ Circuit + Issue + Petitioner + Respondent + LowerCourt + Unconst, data = train,method = "rpart",trControl = numFolds,tuneGrid=cpGrid)  #dep var with ind vars
StevensTreeCV = rpart(Reverse ~ Circuit + Issue + Petitioner + Respondent + LowerCourt + Unconst, data = train,method="class",cp=.18)
PredictCV = predict(StevensTreeCV, newdata=test, type="class")
table(test$Reverse,PredictCV)
(59+64)/(59+18+29+64)
prp(StevensTreeCV)
